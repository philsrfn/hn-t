# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Install dependencies
      run: npm ci
    - name: Setup test environment
      run: |
        # Create a .env file for testing if needed
        echo "NODE_ENV=test" > .env
        # Ensure all testing libraries are installed
        npm install --save-dev @testing-library/react @testing-library/jest-dom @testing-library/user-event
        # Create a setup file for Jest if it doesn't exist
        mkdir -p src
        if [ ! -f "src/setupTests.js" ]; then
          cat > src/setupTests.js << 'EOL'
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

// Mock the window.scrollTo function
window.scrollTo = jest.fn();

// Mock matchMedia
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(),
    removeListener: jest.fn(),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
  })),
});

// Suppress console warnings and errors during tests
const originalConsoleError = console.error;
const originalConsoleWarn = console.warn;
console.error = (...args) => {
  if (args[0] && args[0].includes && 
      (args[0].includes('Warning: An update to') || 
       args[0].includes('not wrapped in act'))) {
    return;
  }
  originalConsoleError(...args);
};
console.warn = (...args) => {
  if (args[0] && args[0].includes && args[0].includes('Warning:')) {
    return;
  }
  originalConsoleWarn(...args);
};
EOL
        fi
    - name: Run tests
      run: npm test -- --watchAll=false --ci --silent
    - name: Build
      run: CI=false npm run build --if-present

    # Deploy to server
    - name: Deploy to server
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: appleboy/ssh-action@master
      with:
        host: 164.30.69.195
        username: linux
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Create directory if it doesn't exist
          mkdir -p /home/linux/hn-t
          
          # Initialize git repo if not already done
          if [ ! -d "/home/linux/hn-t/.git" ]; then
            cd /home/linux/hn-t
            git init
            git remote add origin git@github.com:phneutral26/hn-t.git
            git fetch
            git checkout -f main
          else
            cd /home/linux/hn-t
            git fetch
            git reset --hard origin/main
          fi
          
          # Install dependencies and build
          npm install
          npm run build
          
          # Restart nginx
          sudo systemctl restart nginx
